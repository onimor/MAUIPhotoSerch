@page "/"
@implements IDisposable
@using MAUIPhotoSerch.Data
@using Microsoft.EntityFrameworkCore

@if(processing)
{
    <h3>Ищем секундочку..</h3>
}
else
{
    @if (images.Count > 0)
    {
        foreach (var image in images)
        {
            <h1>@image.Name</h1>
        }
    }
    else
    {
        <h1>Не найдено</h1>
    }
}

@code {
    private List<string> patchs = new()
    {
         #if WINDOWS
            Environment.GetFolderPath(Environment.SpecialFolder.MyPictures), 
        Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
    Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86),
         #elif ANDROID

    Android.OS.Environment.GetExternalStoragePublicDirectory(Android.OS.Environment.DirectoryDcim).Path + "/Camera",

         #endif
    };

    private readonly HashSet<string> filterList = new(StringComparer.Ordinal) { ".jpg", ".png", ".gif", ".jpeg" };
    private List<ImageEF> images = new();
    private bool processing = false;
    private List<FileSystemWatcher> watchers = new List<FileSystemWatcher>();
    private Task CheckDeletImagesThread;
    private Task CheckNewImagesThread;
    CancellationTokenSource tokenSource;
    protected override async Task OnInitializedAsync()
    {
        PermissionStatus statusR = await Permissions.CheckStatusAsync<Permissions.StorageRead>();
        if (statusR != PermissionStatus.Granted)
            statusR = await Permissions.RequestAsync<Permissions.StorageRead>();
        using var imageDBContex = new ImagesDBContex();
        await imageDBContex.Database.EnsureCreatedAsync();
        tokenSource = new CancellationTokenSource();
        CancellationToken ct = tokenSource.Token;
        processing = true;
        try
        {
            //загружаем из базы что есть
            await LoadImages();
            processing = false;
            StateHasChanged();
            //Подписываемся на изменения файлов 
            // !!!!!!!!!НУЖНО СДЕЛАТЬ ОТПИСКУ!!!!!!!!!
            SubscrabeNotifi();
            // создаем таски
            CheckDeletImagesThread = new Task(CheckDeletImages, ct);
            CheckNewImagesThread = new Task(SerchNewImages, ct);
            // запускаем их
            CheckDeletImagesThread.Start();
            CheckNewImagesThread.Start();


        }
        catch
        {

        }
        processing = false;
    }
    //подписываемся на изменение папки для каждого формата файла
    private void SubscrabeNotifi()
    {
        foreach (var filter in filterList)
        {
            foreach (string patch in patchs)
            {
                var watcher = new FileSystemWatcher(patch);

                watcher.NotifyFilter = NotifyFilters.Attributes
                                     | NotifyFilters.CreationTime
                                     | NotifyFilters.DirectoryName
                                     | NotifyFilters.FileName
                                     | NotifyFilters.LastAccess
                                     | NotifyFilters.LastWrite
                                     | NotifyFilters.Security
                                     | NotifyFilters.Size;
                watcher.Changed += OnChanged;
                watcher.Created += OnCreated;
                watcher.Deleted += OnDeleted;
                watcher.Renamed += OnRenamed;

                watcher.Filter = $"*{filter}";
                watcher.IncludeSubdirectories = true;
                watcher.EnableRaisingEvents = true;
                watchers.Add(watcher);
            }
        }
    }
    private void OnChanged(object sender, FileSystemEventArgs e)
    {
        if (e.ChangeType != WatcherChangeTypes.Changed)
        {
            return;
        }
        Console.WriteLine($"Changed: {e.FullPath}"); 
    }
    //событие нового файла
    private async void OnCreated(object sender, FileSystemEventArgs e)
    {
        string value = $"Created: {e.FullPath}";
        Console.WriteLine(value);
        using var imageDBContex = new ImagesDBContex();
        var imagePatch = e.FullPath;
        var name = Path.GetFileName(imagePatch);
        var dateChange = File.GetLastWriteTime(imagePatch);
        var image = images.FirstOrDefault(x => x.Patch == imagePatch && x.Name == name);
        if (image is null)
        {
            var newImage = new ImageEF
                {
                    DateChange = dateChange,
                    Name = name,
                    Patch = imagePatch
                };
            images.Add(newImage);
            await imageDBContex.Images.AddAsync(newImage);

        }
        else
        {
            if (image.DateChange != dateChange)
            {
                image.DateChange = dateChange;
            }
        }
        images = images.OrderByDescending(x => x.DateChange).ToList();
        await InvokeAsync(()=> StateHasChanged());
        await imageDBContex.SaveChangesAsync();
    }
    //событие удаление
    private async void OnDeleted(object sender, FileSystemEventArgs e)
    {
        Console.WriteLine($"Deleted: {e.FullPath}");
        using var imageDBContex = new ImagesDBContex();
        var imagePatch = e.FullPath;
        var name = Path.GetFileName(imagePatch);
        var dateChange = File.GetLastWriteTime(imagePatch);
        var image = images.FirstOrDefault(x => x.Patch == imagePatch && x.Name == name);
        if (image is not null) 
        {
            images.Remove(image);
            imageDBContex.Images.Remove(image);
        } 
        await InvokeAsync(() => StateHasChanged());
        await imageDBContex.SaveChangesAsync(); 
    }
    //событие переименовывания
    private async void OnRenamed(object sender, RenamedEventArgs e)
    {
        Console.WriteLine($"Renamed:");
        Console.WriteLine($"    Old: {e.OldFullPath}");
        Console.WriteLine($"    New: {e.FullPath}");
        using var imageDBContex = new ImagesDBContex();
        var imagePatch = e.OldFullPath;
        var name = e.OldName;
        var dateChange = File.GetLastWriteTime(e.FullPath);
        var image = images.FirstOrDefault(x => x.Patch == imagePatch && x.Name == name);
        if(image is not null)
        {
            image.Name = e.Name;
            image.Patch = e.FullPath;
            image.DateChange = dateChange; 
            images = images.OrderByDescending(x => x.DateChange).ToList();
            await InvokeAsync(() => StateHasChanged());
            imageDBContex.Update(image);
            await imageDBContex.SaveChangesAsync();
        }

    }

    //загружаем из базы все что есть
    private async Task LoadImages()
    {
        using var imageDBContex = new ImagesDBContex();
        images = await imageDBContex.Images.OrderByDescending(x => x.DateChange).ToListAsync();
    }
    //ищем все изображения в папках
    private List<string> SerchImagesPatchAsync()
    {
        List<string> imagesPatch = new();
        try
        {
            foreach (string patch in patchs)
            {
                imagesPatch.AddRange(Directory.EnumerateFiles(patch, "*", SearchOption.TopDirectoryOnly)
                .Where(s => filterList.Contains(Path.GetExtension(s)))); // поиск по шаблону
            }

        }
        catch(Exception ex)
        {

        }
        return imagesPatch;
    }

    //Проверяем вдруг уже каких то фото не существует
    private async void CheckDeletImages()
    {
        using var imageDBContex = new ImagesDBContex();
        List<ImageEF> removeImagesList = new();
        foreach (var image in images)
        {
            if (!File.Exists(image.Patch))
            {
                removeImagesList.Add(image);
            } 
        } 
        foreach (var removeImage in removeImagesList)
        {
            images.Remove(removeImage);
            await InvokeAsync(()=>StateHasChanged());
        }
        imageDBContex.Images.RemoveRange(removeImagesList);
        await imageDBContex.SaveChangesAsync(); 
    }

    //ищем новые фото
    private async void SerchNewImages()
    {
        using var imageDBContex = new ImagesDBContex();
        var imagePatchs = SerchImagesPatchAsync(); 
        foreach (var imagePatch in imagePatchs)
        {
            var name = Path.GetFileName(imagePatch);
            var dateChange = File.GetLastWriteTime(imagePatch);
            var image = images.FirstOrDefault(x => x.Patch == imagePatch && x.Name == name);
            if (image is null)
            {
                var newImage = new ImageEF
                    {
                        DateChange = dateChange,
                        Name = name,
                        Patch = imagePatch
                    };
                images.Add(newImage);
                await imageDBContex.Images.AddAsync(newImage); 

            }
            else
            {
                if (image.DateChange != dateChange)
                {
                    image.DateChange = dateChange;
                }
            }
            images = images.OrderByDescending(x => x.DateChange).ToList();
            await InvokeAsync(() => StateHasChanged());
            await imageDBContex.SaveChangesAsync();
        }

    }
    public void Dispose()
    {
        tokenSource.Cancel();
        tokenSource.Dispose();
        CheckDeletImagesThread.Dispose();
        CheckNewImagesThread.Dispose();
        foreach (var watcher in watchers)
        {
            watcher.Changed -= OnChanged;
            watcher.Created -= OnCreated;
            watcher.Deleted -= OnDeleted;
            watcher.Renamed -= OnRenamed;
            watcher?.Dispose();
        }
    }
}
